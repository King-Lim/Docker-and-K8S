1.kubernetes的升级步骤
    K8S集群是通过kubeadm的方式安装，然后通过kubeadm初始化安装其他所有组件；
    @节点的升级步骤：
        先升级master；
        再升级worker；
        如果有多台master，需要一台台升级完毕后，再去升级worker；
    @软件的升级步骤：
        无论是master还是worker
        先升级kubeadm；
        再执行kubeadm upgrade；
        再升级kubelet和kubectl；
        
2.概念：
    控制管理器Deployment会创建出RS（ReplicaSet），由RS去创建相应的Pod；
    滚动更新时，新建RS1之后，原RS会停用，并不会删除（用以回滚）；
    HPA（Horizontal Pod Autoscaling）基于RS创建，根据CPU的利用率，对该RS下的Pod进行缩/扩容；

3.kubernetes组件：
    @Master Node关键组件：
        *etcd：保存了整个集群的状态，就是一个数据库，只有API Server能与其通信；
        *API Server：提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现机制；
        *controller manager：负责维护集群的状态，是集群内所有资源对象的自动化控制中心，负责Pod和Node的管理；
            如：故障检测、自动扩展、滚动更新等；
        *scheduler：负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上；
        *网络插件：如flannel等需要存储网络配置信息；
        【注：scheduler和controller-manager都是通过API Server从etcd中获取各种资源的状态，进行相应的调度和控制操作】
    @Worker Node节点关键组件：        
        *kubelet：处理Master下发到本节点的任务，管理Pod及Pod的容器，每个kubelet在API Server上注册自身信息，定期向Master汇报节点资源的使用情况，并通过cAdvisor监控容器和节点信息；
            负责维护容器的生命周期，同时也负责Volume（CSI）和网络（CNI）的管理；
        *Container runtime：负责镜像管理以及Pod和容器的真正运行（CRI）；
        *kube-proxy：负责为Service提供cluster内部的服务发现和负载均衡；
        *CNI网络组件：作为容器平台的网络标准化组件，为容器提供跨网段的通信支持，是kubernetes集群overlay网络的实现关键；(calico网络：使节点中的pod能够互相通信)
        *Docker：kubernetes支持多种容器工具，目前Docker作为主流的容器，为K8S集群提供容器创建及管理；
    @集群各组件间的交互：
        *kubelet&API Server
        *Controller-manager&API Server
        *Scheduler&API Server
    list-watch机制        
            
----------------------------------------------------------------------------------------------------------------------------------    
1.k8s架构：
  master控制台，也叫做control plane node（控制平面节点）；
  worker，专门用于运行pod；

2.kubernetes的最小管理单位是pod；
  pod由kubernetes创建；
  master根据调度程序（scheduler）决定在哪台worker上创建pod；

3.master上运行的组件及作用
  kubectl：命令行工具，用以用户创建、删除、查看相关pod；
  api-server：接收用户发送的请求的接口；
  scheduler：调度器

-----------------------------------------------------------------------------------------------------------------------------------
1.kubectl repalce命令
    用于使用配置文件或json文件来替换资源；
    支持json、yaml格式文件；替换当前资源时，需要使用完整规范的配置文件
    *强制替换，删除原有资源，重新创建新的资源；
        #kubectl replace --force -f filename
        
2.kubectl get all -A                        #查看所有namespace中的pod资源情况
